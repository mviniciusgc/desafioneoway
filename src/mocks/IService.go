// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	io "io"

	entity "github.com/mviniciusgc/desafio_neoway/src/entity"

	mock "github.com/stretchr/testify/mock"
)

// IService is an autogenerated mock type for the IService type
type IService struct {
	mock.Mock
}

// CreateArrayForInsert provides a mock function with given fields: purchase
func (_m *IService) CreateArrayForInsert(purchase io.Reader) (*[]string, error) {
	ret := _m.Called(purchase)

	var r0 *[]string
	var r1 error
	if rf, ok := ret.Get(0).(func(io.Reader) (*[]string, error)); ok {
		return rf(purchase)
	}
	if rf, ok := ret.Get(0).(func(io.Reader) *[]string); ok {
		r0 = rf(purchase)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]string)
		}
	}

	if rf, ok := ret.Get(1).(func(io.Reader) error); ok {
		r1 = rf(purchase)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FormateDataForCreate provides a mock function with given fields: values
func (_m *IService) FormateDataForCreate(values []string) *[]entity.Purchase {
	ret := _m.Called(values)

	var r0 *[]entity.Purchase
	if rf, ok := ret.Get(0).(func([]string) *[]entity.Purchase); ok {
		r0 = rf(values)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Purchase)
		}
	}

	return r0
}

// InsertBatch provides a mock function with given fields: Purchases, lengthBatch
func (_m *IService) InsertBatch(Purchases *[]entity.Purchase, lengthBatch int) error {
	ret := _m.Called(Purchases, lengthBatch)

	var r0 error
	if rf, ok := ret.Get(0).(func(*[]entity.Purchase, int) error); ok {
		r0 = rf(Purchases, lengthBatch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidationData provides a mock function with given fields: values
func (_m *IService) ValidationData(values []string) error {
	ret := _m.Called(values)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewIService creates a new instance of IService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IService {
	mock := &IService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
