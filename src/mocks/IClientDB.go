// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// IClientDB is an autogenerated mock type for the IClientDB type
type IClientDB struct {
	mock.Mock
}

// Begin provides a mock function with given fields: conn
func (_m *IClientDB) Begin(conn *sql.DB) (*sql.Tx, error) {
	ret := _m.Called(conn)

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.DB) (*sql.Tx, error)); ok {
		return rf(conn)
	}
	if rf, ok := ret.Get(0).(func(*sql.DB) *sql.Tx); ok {
		r0 = rf(conn)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.DB) error); ok {
		r1 = rf(conn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Close provides a mock function with given fields: smtp
func (_m *IClientDB) Close(smtp *sql.Stmt) error {
	ret := _m.Called(smtp)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Stmt) error); ok {
		r0 = rf(smtp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Commit provides a mock function with given fields: tx
func (_m *IClientDB) Commit(tx *sql.Tx) error {
	ret := _m.Called(tx)

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Exec provides a mock function with given fields: stmt, lineFile
func (_m *IClientDB) Exec(stmt *sql.Stmt, lineFile []interface{}) (sql.Result, error) {
	ret := _m.Called(stmt, lineFile)

	var r0 sql.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Stmt, []interface{}) (sql.Result, error)); ok {
		return rf(stmt, lineFile)
	}
	if rf, ok := ret.Get(0).(func(*sql.Stmt, []interface{}) sql.Result); ok {
		r0 = rf(stmt, lineFile)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sql.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Stmt, []interface{}) error); ok {
		r1 = rf(stmt, lineFile)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitDB provides a mock function with given fields:
func (_m *IClientDB) InitDB() (*sql.DB, error) {
	ret := _m.Called()

	var r0 *sql.DB
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.DB, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.DB); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.DB)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InitializeTables provides a mock function with given fields:
func (_m *IClientDB) InitializeTables() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Prepare provides a mock function with given fields: tx, nameTable, fields
func (_m *IClientDB) Prepare(tx *sql.Tx, nameTable string, fields []string) (*sql.Stmt, error) {
	ret := _m.Called(tx, nameTable, fields)

	var r0 *sql.Stmt
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string, []string) (*sql.Stmt, error)); ok {
		return rf(tx, nameTable, fields)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string, []string) *sql.Stmt); ok {
		r0 = rf(tx, nameTable, fields)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Stmt)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string, []string) error); ok {
		r1 = rf(tx, nameTable, fields)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIClientDB creates a new instance of IClientDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIClientDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *IClientDB {
	mock := &IClientDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
